// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

int rows;
int cols;

StructuredBuffer<int> currentState;
RWStructuredBuffer<int> nextState;

int get_index(int x, int y) {
    return cols * y + x;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int neighborCount = 0;

    for (int y = -1; y <= 1; y += 1) {
        for (int x = -1; x <= 1; x += 1) {
            int neighbor_x = id.x + x;
            int neighbor_y= id.y + y;
            int index = get_index(neighbor_x, neighbor_y);

            if (!(y == 0 && x == 0) && neighbor_x >= 0 && neighbor_x < cols && neighbor_y >= 0 && neighbor_y < rows && currentState[index] == 1) {
                neighborCount += 1;
            }
        }
    }

    int currentIndex = get_index(id.x, id.y);

    nextState[currentIndex] = (neighborCount == 3) ? 1 : (neighborCount == 2) ? currentState[currentIndex] : 0;
}
